// <auto-generated />
using System;
using AngularSchool.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AngularSchool.API.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20230613021908_iniciarMySql")]
    partial class iniciarMySql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AngularSchool.API.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Matricula")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Alunos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(3711),
                            DataNascimento = new DateTime(2003, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 1,
                            Nome = "Joana",
                            Sobrenome = "Silva",
                            Telefone = "111111111"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(7265),
                            DataNascimento = new DateTime(2003, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 2,
                            Nome = "Maria",
                            Sobrenome = "Santos",
                            Telefone = "22222222"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(7357),
                            DataNascimento = new DateTime(2003, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 3,
                            Nome = "Carolina",
                            Sobrenome = "Pereira",
                            Telefone = "33333333"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(7369),
                            DataNascimento = new DateTime(2003, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 4,
                            Nome = "Ana",
                            Sobrenome = "Lima",
                            Telefone = "44444444"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(7377),
                            DataNascimento = new DateTime(2003, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 5,
                            Nome = "Bruno",
                            Sobrenome = "Ferreira",
                            Telefone = "5555555"
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(7395),
                            DataNascimento = new DateTime(2003, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 6,
                            Nome = "Rafael",
                            Sobrenome = "Martins",
                            Telefone = "88888888"
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(7404),
                            DataNascimento = new DateTime(2003, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Matricula = 7,
                            Nome = "Luciana",
                            Sobrenome = "Rodrigues",
                            Telefone = "7777777"
                        });
                });

            modelBuilder.Entity("AngularSchool.API.Models.AlunoCurso", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AlunoId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("AlunosCursos");
                });

            modelBuilder.Entity("AngularSchool.API.Models.AlunoDisciplina", b =>
                {
                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("Nota")
                        .HasColumnType("double");

                    b.HasKey("AlunoId", "DisciplinaId");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("AlunosDisciplinas");

                    b.HasData(
                        new
                        {
                            AlunoId = 1,
                            DisciplinaId = 2,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 957, DateTimeKind.Local).AddTicks(9889)
                        },
                        new
                        {
                            AlunoId = 1,
                            DisciplinaId = 4,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(792)
                        },
                        new
                        {
                            AlunoId = 1,
                            DisciplinaId = 5,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(826)
                        },
                        new
                        {
                            AlunoId = 2,
                            DisciplinaId = 1,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(829)
                        },
                        new
                        {
                            AlunoId = 2,
                            DisciplinaId = 2,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(831)
                        },
                        new
                        {
                            AlunoId = 2,
                            DisciplinaId = 5,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(836)
                        },
                        new
                        {
                            AlunoId = 3,
                            DisciplinaId = 1,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(838)
                        },
                        new
                        {
                            AlunoId = 3,
                            DisciplinaId = 2,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(840)
                        },
                        new
                        {
                            AlunoId = 3,
                            DisciplinaId = 3,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(841)
                        },
                        new
                        {
                            AlunoId = 4,
                            DisciplinaId = 1,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(845)
                        },
                        new
                        {
                            AlunoId = 4,
                            DisciplinaId = 4,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(847)
                        },
                        new
                        {
                            AlunoId = 4,
                            DisciplinaId = 5,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(849)
                        },
                        new
                        {
                            AlunoId = 5,
                            DisciplinaId = 4,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(850)
                        },
                        new
                        {
                            AlunoId = 5,
                            DisciplinaId = 5,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(852)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 1,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(853)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 2,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(855)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 3,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(857)
                        },
                        new
                        {
                            AlunoId = 6,
                            DisciplinaId = 4,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(860)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 1,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(862)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 2,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(863)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 3,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(865)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 4,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(867)
                        },
                        new
                        {
                            AlunoId = 7,
                            DisciplinaId = 5,
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 958, DateTimeKind.Local).AddTicks(868)
                        });
                });

            modelBuilder.Entity("AngularSchool.API.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Engenharia de Software"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Análise e Desenvolvimento de Sistemas"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Ciências da Computação"
                        });
                });

            modelBuilder.Entity("AngularSchool.API.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PrerequisitoId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("PrerequisitoId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Disciplinas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CargaHoraria = 0,
                            CursoId = 1,
                            Nome = "Cálculo",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CargaHoraria = 0,
                            CursoId = 3,
                            Nome = "Cálculo",
                            ProfessorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CargaHoraria = 0,
                            CursoId = 3,
                            Nome = "Gramática",
                            ProfessorId = 2
                        },
                        new
                        {
                            Id = 4,
                            CargaHoraria = 0,
                            CursoId = 1,
                            Nome = "Português",
                            ProfessorId = 3
                        },
                        new
                        {
                            Id = 5,
                            CargaHoraria = 0,
                            CursoId = 1,
                            Nome = "Programação I",
                            ProfessorId = 4
                        },
                        new
                        {
                            Id = 6,
                            CargaHoraria = 0,
                            CursoId = 2,
                            Nome = "Programação I",
                            ProfessorId = 4
                        },
                        new
                        {
                            Id = 7,
                            CargaHoraria = 0,
                            CursoId = 3,
                            Nome = "Mecânica Clássica",
                            ProfessorId = 4
                        },
                        new
                        {
                            Id = 8,
                            CargaHoraria = 0,
                            CursoId = 1,
                            Nome = "Álgebra Linear",
                            ProfessorId = 5
                        },
                        new
                        {
                            Id = 9,
                            CargaHoraria = 0,
                            CursoId = 2,
                            Nome = "Álgebra Linear",
                            ProfessorId = 5
                        },
                        new
                        {
                            Id = 10,
                            CargaHoraria = 0,
                            CursoId = 3,
                            Nome = "Álgebra Linear",
                            ProfessorId = 5
                        });
                });

            modelBuilder.Entity("AngularSchool.API.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Registro")
                        .HasColumnType("int");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Professores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 823, DateTimeKind.Local).AddTicks(3415),
                            Nome = "John",
                            Registro = 1,
                            Sobrenome = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 825, DateTimeKind.Local).AddTicks(5454),
                            Nome = "Jane",
                            Registro = 2,
                            Sobrenome = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 825, DateTimeKind.Local).AddTicks(5572),
                            Nome = "Michael",
                            Registro = 3,
                            Sobrenome = "Johnson"
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 825, DateTimeKind.Local).AddTicks(5575),
                            Nome = "Emily",
                            Registro = 4,
                            Sobrenome = "Davis"
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            DataInicio = new DateTime(2023, 6, 12, 23, 19, 6, 825, DateTimeKind.Local).AddTicks(5577),
                            Nome = "Daniel",
                            Registro = 5,
                            Sobrenome = "Wilson"
                        });
                });

            modelBuilder.Entity("AngularSchool.API.Models.AlunoCurso", b =>
                {
                    b.HasOne("AngularSchool.API.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularSchool.API.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AngularSchool.API.Models.AlunoDisciplina", b =>
                {
                    b.HasOne("AngularSchool.API.Models.Aluno", "Aluno")
                        .WithMany("AlunosDisciplinas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularSchool.API.Models.Disciplina", "Disciplina")
                        .WithMany("AlunosDisciplinas")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AngularSchool.API.Models.Disciplina", b =>
                {
                    b.HasOne("AngularSchool.API.Models.Curso", "Curso")
                        .WithMany("Disciplinas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularSchool.API.Models.Disciplina", "Prerequisito")
                        .WithMany()
                        .HasForeignKey("PrerequisitoId");

                    b.HasOne("AngularSchool.API.Models.Professor", "Professor")
                        .WithMany("Disciplinas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
